#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ForteQuest
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ForteQuestX")]
	public partial class ForteDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivities1(Activities1 instance);
    partial void UpdateActivities1(Activities1 instance);
    partial void DeleteActivities1(Activities1 instance);
    partial void InsertForteQuestActivity(ForteQuestActivity instance);
    partial void UpdateForteQuestActivity(ForteQuestActivity instance);
    partial void DeleteForteQuestActivity(ForteQuestActivity instance);
    partial void InsertForteQuestMapping(ForteQuestMapping instance);
    partial void UpdateForteQuestMapping(ForteQuestMapping instance);
    partial void DeleteForteQuestMapping(ForteQuestMapping instance);
    partial void InsertForteQuest(ForteQuest instance);
    partial void UpdateForteQuest(ForteQuest instance);
    partial void DeleteForteQuest(ForteQuest instance);
    partial void InsertForteQuestSubMapping(ForteQuestSubMapping instance);
    partial void UpdateForteQuestSubMapping(ForteQuestSubMapping instance);
    partial void DeleteForteQuestSubMapping(ForteQuestSubMapping instance);
    partial void InsertMapping(Mapping instance);
    partial void UpdateMapping(Mapping instance);
    partial void DeleteMapping(Mapping instance);
    partial void InsertSubMapping(SubMapping instance);
    partial void UpdateSubMapping(SubMapping instance);
    partial void DeleteSubMapping(SubMapping instance);
    #endregion
		
		public ForteDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ForteQuestXConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ForteDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForteDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForteDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForteDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activities1> Activities1s
		{
			get
			{
				return this.GetTable<Activities1>();
			}
		}
		
		public System.Data.Linq.Table<ForteQuestActivity> ForteQuestActivities
		{
			get
			{
				return this.GetTable<ForteQuestActivity>();
			}
		}
		
		public System.Data.Linq.Table<ForteQuestMapping> ForteQuestMappings
		{
			get
			{
				return this.GetTable<ForteQuestMapping>();
			}
		}
		
		public System.Data.Linq.Table<ForteQuest> ForteQuests
		{
			get
			{
				return this.GetTable<ForteQuest>();
			}
		}
		
		public System.Data.Linq.Table<ForteQuestSubMapping> ForteQuestSubMappings
		{
			get
			{
				return this.GetTable<ForteQuestSubMapping>();
			}
		}
		
		public System.Data.Linq.Table<Mapping> Mappings
		{
			get
			{
				return this.GetTable<Mapping>();
			}
		}
		
		public System.Data.Linq.Table<SubMapping> SubMappings
		{
			get
			{
				return this.GetTable<SubMapping>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activities1")]
	public partial class Activities1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActivityId;
		
		private string _ActivityName;
		
		private string _ActivityType;
		
		private bool _IsTeam;
		
		private double _MaxScore;
		
		private int _InstructorWeightage;
		
		private int _TAWeightage;
		
		private int _Duration;
		
		private EntitySet<ForteQuestActivity> _ForteQuestActivities;
		
		private EntitySet<SubMapping> _SubMappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIdChanging(int value);
    partial void OnActivityIdChanged();
    partial void OnActivityNameChanging(string value);
    partial void OnActivityNameChanged();
    partial void OnActivityTypeChanging(string value);
    partial void OnActivityTypeChanged();
    partial void OnIsTeamChanging(bool value);
    partial void OnIsTeamChanged();
    partial void OnMaxScoreChanging(double value);
    partial void OnMaxScoreChanged();
    partial void OnInstructorWeightageChanging(int value);
    partial void OnInstructorWeightageChanged();
    partial void OnTAWeightageChanging(int value);
    partial void OnTAWeightageChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    #endregion
		
		public Activities1()
		{
			this._ForteQuestActivities = new EntitySet<ForteQuestActivity>(new Action<ForteQuestActivity>(this.attach_ForteQuestActivities), new Action<ForteQuestActivity>(this.detach_ForteQuestActivities));
			this._SubMappings = new EntitySet<SubMapping>(new Action<SubMapping>(this.attach_SubMappings), new Action<SubMapping>(this.detach_SubMappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ActivityName
		{
			get
			{
				return this._ActivityName;
			}
			set
			{
				if ((this._ActivityName != value))
				{
					this.OnActivityNameChanging(value);
					this.SendPropertyChanging();
					this._ActivityName = value;
					this.SendPropertyChanged("ActivityName");
					this.OnActivityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityType", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ActivityType
		{
			get
			{
				return this._ActivityType;
			}
			set
			{
				if ((this._ActivityType != value))
				{
					this.OnActivityTypeChanging(value);
					this.SendPropertyChanging();
					this._ActivityType = value;
					this.SendPropertyChanged("ActivityType");
					this.OnActivityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTeam", DbType="Bit NOT NULL")]
		public bool IsTeam
		{
			get
			{
				return this._IsTeam;
			}
			set
			{
				if ((this._IsTeam != value))
				{
					this.OnIsTeamChanging(value);
					this.SendPropertyChanging();
					this._IsTeam = value;
					this.SendPropertyChanged("IsTeam");
					this.OnIsTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxScore", DbType="Float NOT NULL")]
		public double MaxScore
		{
			get
			{
				return this._MaxScore;
			}
			set
			{
				if ((this._MaxScore != value))
				{
					this.OnMaxScoreChanging(value);
					this.SendPropertyChanging();
					this._MaxScore = value;
					this.SendPropertyChanged("MaxScore");
					this.OnMaxScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorWeightage", DbType="Int NOT NULL")]
		public int InstructorWeightage
		{
			get
			{
				return this._InstructorWeightage;
			}
			set
			{
				if ((this._InstructorWeightage != value))
				{
					this.OnInstructorWeightageChanging(value);
					this.SendPropertyChanging();
					this._InstructorWeightage = value;
					this.SendPropertyChanged("InstructorWeightage");
					this.OnInstructorWeightageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TAWeightage", DbType="Int NOT NULL")]
		public int TAWeightage
		{
			get
			{
				return this._TAWeightage;
			}
			set
			{
				if ((this._TAWeightage != value))
				{
					this.OnTAWeightageChanging(value);
					this.SendPropertyChanging();
					this._TAWeightage = value;
					this.SendPropertyChanged("TAWeightage");
					this.OnTAWeightageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activities1_ForteQuestActivity", Storage="_ForteQuestActivities", ThisKey="ActivityId", OtherKey="Activities_ActivityId")]
		public EntitySet<ForteQuestActivity> ForteQuestActivities
		{
			get
			{
				return this._ForteQuestActivities;
			}
			set
			{
				this._ForteQuestActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activities1_SubMapping", Storage="_SubMappings", ThisKey="ActivityId", OtherKey="Activity_ActivityId")]
		public EntitySet<SubMapping> SubMappings
		{
			get
			{
				return this._SubMappings;
			}
			set
			{
				this._SubMappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForteQuestActivities(ForteQuestActivity entity)
		{
			this.SendPropertyChanging();
			entity.Activities1 = this;
		}
		
		private void detach_ForteQuestActivities(ForteQuestActivity entity)
		{
			this.SendPropertyChanging();
			entity.Activities1 = null;
		}
		
		private void attach_SubMappings(SubMapping entity)
		{
			this.SendPropertyChanging();
			entity.Activities1 = this;
		}
		
		private void detach_SubMappings(SubMapping entity)
		{
			this.SendPropertyChanging();
			entity.Activities1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForteQuestActivities")]
	public partial class ForteQuestActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForteQuest_ForteQuestId;
		
		private int _Activities_ActivityId;
		
		private EntityRef<Activities1> _Activities1;
		
		private EntityRef<ForteQuest> _ForteQuest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForteQuest_ForteQuestIdChanging(int value);
    partial void OnForteQuest_ForteQuestIdChanged();
    partial void OnActivities_ActivityIdChanging(int value);
    partial void OnActivities_ActivityIdChanged();
    #endregion
		
		public ForteQuestActivity()
		{
			this._Activities1 = default(EntityRef<Activities1>);
			this._ForteQuest = default(EntityRef<ForteQuest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForteQuest_ForteQuestId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ForteQuest_ForteQuestId
		{
			get
			{
				return this._ForteQuest_ForteQuestId;
			}
			set
			{
				if ((this._ForteQuest_ForteQuestId != value))
				{
					if (this._ForteQuest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForteQuest_ForteQuestIdChanging(value);
					this.SendPropertyChanging();
					this._ForteQuest_ForteQuestId = value;
					this.SendPropertyChanged("ForteQuest_ForteQuestId");
					this.OnForteQuest_ForteQuestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activities_ActivityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Activities_ActivityId
		{
			get
			{
				return this._Activities_ActivityId;
			}
			set
			{
				if ((this._Activities_ActivityId != value))
				{
					if (this._Activities1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivities_ActivityIdChanging(value);
					this.SendPropertyChanging();
					this._Activities_ActivityId = value;
					this.SendPropertyChanged("Activities_ActivityId");
					this.OnActivities_ActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activities1_ForteQuestActivity", Storage="_Activities1", ThisKey="Activities_ActivityId", OtherKey="ActivityId", IsForeignKey=true)]
		public Activities1 Activities1
		{
			get
			{
				return this._Activities1.Entity;
			}
			set
			{
				Activities1 previousValue = this._Activities1.Entity;
				if (((previousValue != value) 
							|| (this._Activities1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activities1.Entity = null;
						previousValue.ForteQuestActivities.Remove(this);
					}
					this._Activities1.Entity = value;
					if ((value != null))
					{
						value.ForteQuestActivities.Add(this);
						this._Activities_ActivityId = value.ActivityId;
					}
					else
					{
						this._Activities_ActivityId = default(int);
					}
					this.SendPropertyChanged("Activities1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForteQuest_ForteQuestActivity", Storage="_ForteQuest", ThisKey="ForteQuest_ForteQuestId", OtherKey="ForteQuestId", IsForeignKey=true)]
		public ForteQuest ForteQuest
		{
			get
			{
				return this._ForteQuest.Entity;
			}
			set
			{
				ForteQuest previousValue = this._ForteQuest.Entity;
				if (((previousValue != value) 
							|| (this._ForteQuest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForteQuest.Entity = null;
						previousValue.ForteQuestActivities.Remove(this);
					}
					this._ForteQuest.Entity = value;
					if ((value != null))
					{
						value.ForteQuestActivities.Add(this);
						this._ForteQuest_ForteQuestId = value.ForteQuestId;
					}
					else
					{
						this._ForteQuest_ForteQuestId = default(int);
					}
					this.SendPropertyChanged("ForteQuest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForteQuestMapping")]
	public partial class ForteQuestMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForteQuest_ForteQuestId;
		
		private int _Mappings_MappingId;
		
		private EntityRef<ForteQuest> _ForteQuest;
		
		private EntityRef<Mapping> _Mapping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForteQuest_ForteQuestIdChanging(int value);
    partial void OnForteQuest_ForteQuestIdChanged();
    partial void OnMappings_MappingIdChanging(int value);
    partial void OnMappings_MappingIdChanged();
    #endregion
		
		public ForteQuestMapping()
		{
			this._ForteQuest = default(EntityRef<ForteQuest>);
			this._Mapping = default(EntityRef<Mapping>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForteQuest_ForteQuestId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ForteQuest_ForteQuestId
		{
			get
			{
				return this._ForteQuest_ForteQuestId;
			}
			set
			{
				if ((this._ForteQuest_ForteQuestId != value))
				{
					if (this._ForteQuest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForteQuest_ForteQuestIdChanging(value);
					this.SendPropertyChanging();
					this._ForteQuest_ForteQuestId = value;
					this.SendPropertyChanged("ForteQuest_ForteQuestId");
					this.OnForteQuest_ForteQuestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mappings_MappingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Mappings_MappingId
		{
			get
			{
				return this._Mappings_MappingId;
			}
			set
			{
				if ((this._Mappings_MappingId != value))
				{
					if (this._Mapping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMappings_MappingIdChanging(value);
					this.SendPropertyChanging();
					this._Mappings_MappingId = value;
					this.SendPropertyChanged("Mappings_MappingId");
					this.OnMappings_MappingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForteQuest_ForteQuestMapping", Storage="_ForteQuest", ThisKey="ForteQuest_ForteQuestId", OtherKey="ForteQuestId", IsForeignKey=true)]
		public ForteQuest ForteQuest
		{
			get
			{
				return this._ForteQuest.Entity;
			}
			set
			{
				ForteQuest previousValue = this._ForteQuest.Entity;
				if (((previousValue != value) 
							|| (this._ForteQuest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForteQuest.Entity = null;
						previousValue.ForteQuestMappings.Remove(this);
					}
					this._ForteQuest.Entity = value;
					if ((value != null))
					{
						value.ForteQuestMappings.Add(this);
						this._ForteQuest_ForteQuestId = value.ForteQuestId;
					}
					else
					{
						this._ForteQuest_ForteQuestId = default(int);
					}
					this.SendPropertyChanged("ForteQuest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mapping_ForteQuestMapping", Storage="_Mapping", ThisKey="Mappings_MappingId", OtherKey="MappingId", IsForeignKey=true)]
		public Mapping Mapping
		{
			get
			{
				return this._Mapping.Entity;
			}
			set
			{
				Mapping previousValue = this._Mapping.Entity;
				if (((previousValue != value) 
							|| (this._Mapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mapping.Entity = null;
						previousValue.ForteQuestMappings.Remove(this);
					}
					this._Mapping.Entity = value;
					if ((value != null))
					{
						value.ForteQuestMappings.Add(this);
						this._Mappings_MappingId = value.MappingId;
					}
					else
					{
						this._Mappings_MappingId = default(int);
					}
					this.SendPropertyChanged("Mapping");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForteQuests")]
	public partial class ForteQuest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForteQuestId;
		
		private System.DateTime _SceduledDate;
		
		private string _ForteQuestName;
		
		private EntitySet<ForteQuestActivity> _ForteQuestActivities;
		
		private EntitySet<ForteQuestMapping> _ForteQuestMappings;
		
		private EntitySet<ForteQuestSubMapping> _ForteQuestSubMappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForteQuestIdChanging(int value);
    partial void OnForteQuestIdChanged();
    partial void OnSceduledDateChanging(System.DateTime value);
    partial void OnSceduledDateChanged();
    partial void OnForteQuestNameChanging(string value);
    partial void OnForteQuestNameChanged();
    #endregion
		
		public ForteQuest()
		{
			this._ForteQuestActivities = new EntitySet<ForteQuestActivity>(new Action<ForteQuestActivity>(this.attach_ForteQuestActivities), new Action<ForteQuestActivity>(this.detach_ForteQuestActivities));
			this._ForteQuestMappings = new EntitySet<ForteQuestMapping>(new Action<ForteQuestMapping>(this.attach_ForteQuestMappings), new Action<ForteQuestMapping>(this.detach_ForteQuestMappings));
			this._ForteQuestSubMappings = new EntitySet<ForteQuestSubMapping>(new Action<ForteQuestSubMapping>(this.attach_ForteQuestSubMappings), new Action<ForteQuestSubMapping>(this.detach_ForteQuestSubMappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForteQuestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ForteQuestId
		{
			get
			{
				return this._ForteQuestId;
			}
			set
			{
				if ((this._ForteQuestId != value))
				{
					this.OnForteQuestIdChanging(value);
					this.SendPropertyChanging();
					this._ForteQuestId = value;
					this.SendPropertyChanged("ForteQuestId");
					this.OnForteQuestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SceduledDate", DbType="DateTime NOT NULL")]
		public System.DateTime SceduledDate
		{
			get
			{
				return this._SceduledDate;
			}
			set
			{
				if ((this._SceduledDate != value))
				{
					this.OnSceduledDateChanging(value);
					this.SendPropertyChanging();
					this._SceduledDate = value;
					this.SendPropertyChanged("SceduledDate");
					this.OnSceduledDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForteQuestName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ForteQuestName
		{
			get
			{
				return this._ForteQuestName;
			}
			set
			{
				if ((this._ForteQuestName != value))
				{
					this.OnForteQuestNameChanging(value);
					this.SendPropertyChanging();
					this._ForteQuestName = value;
					this.SendPropertyChanged("ForteQuestName");
					this.OnForteQuestNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForteQuest_ForteQuestActivity", Storage="_ForteQuestActivities", ThisKey="ForteQuestId", OtherKey="ForteQuest_ForteQuestId")]
		public EntitySet<ForteQuestActivity> ForteQuestActivities
		{
			get
			{
				return this._ForteQuestActivities;
			}
			set
			{
				this._ForteQuestActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForteQuest_ForteQuestMapping", Storage="_ForteQuestMappings", ThisKey="ForteQuestId", OtherKey="ForteQuest_ForteQuestId")]
		public EntitySet<ForteQuestMapping> ForteQuestMappings
		{
			get
			{
				return this._ForteQuestMappings;
			}
			set
			{
				this._ForteQuestMappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForteQuest_ForteQuestSubMapping", Storage="_ForteQuestSubMappings", ThisKey="ForteQuestId", OtherKey="ForteQuest_ForteQuestId")]
		public EntitySet<ForteQuestSubMapping> ForteQuestSubMappings
		{
			get
			{
				return this._ForteQuestSubMappings;
			}
			set
			{
				this._ForteQuestSubMappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForteQuestActivities(ForteQuestActivity entity)
		{
			this.SendPropertyChanging();
			entity.ForteQuest = this;
		}
		
		private void detach_ForteQuestActivities(ForteQuestActivity entity)
		{
			this.SendPropertyChanging();
			entity.ForteQuest = null;
		}
		
		private void attach_ForteQuestMappings(ForteQuestMapping entity)
		{
			this.SendPropertyChanging();
			entity.ForteQuest = this;
		}
		
		private void detach_ForteQuestMappings(ForteQuestMapping entity)
		{
			this.SendPropertyChanging();
			entity.ForteQuest = null;
		}
		
		private void attach_ForteQuestSubMappings(ForteQuestSubMapping entity)
		{
			this.SendPropertyChanging();
			entity.ForteQuest = this;
		}
		
		private void detach_ForteQuestSubMappings(ForteQuestSubMapping entity)
		{
			this.SendPropertyChanging();
			entity.ForteQuest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForteQuestSubMapping")]
	public partial class ForteQuestSubMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForteQuest_ForteQuestId;
		
		private int _SubMappings_SubMappingId;
		
		private EntityRef<ForteQuest> _ForteQuest;
		
		private EntityRef<SubMapping> _SubMapping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForteQuest_ForteQuestIdChanging(int value);
    partial void OnForteQuest_ForteQuestIdChanged();
    partial void OnSubMappings_SubMappingIdChanging(int value);
    partial void OnSubMappings_SubMappingIdChanged();
    #endregion
		
		public ForteQuestSubMapping()
		{
			this._ForteQuest = default(EntityRef<ForteQuest>);
			this._SubMapping = default(EntityRef<SubMapping>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForteQuest_ForteQuestId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ForteQuest_ForteQuestId
		{
			get
			{
				return this._ForteQuest_ForteQuestId;
			}
			set
			{
				if ((this._ForteQuest_ForteQuestId != value))
				{
					if (this._ForteQuest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForteQuest_ForteQuestIdChanging(value);
					this.SendPropertyChanging();
					this._ForteQuest_ForteQuestId = value;
					this.SendPropertyChanged("ForteQuest_ForteQuestId");
					this.OnForteQuest_ForteQuestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubMappings_SubMappingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubMappings_SubMappingId
		{
			get
			{
				return this._SubMappings_SubMappingId;
			}
			set
			{
				if ((this._SubMappings_SubMappingId != value))
				{
					if (this._SubMapping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubMappings_SubMappingIdChanging(value);
					this.SendPropertyChanging();
					this._SubMappings_SubMappingId = value;
					this.SendPropertyChanged("SubMappings_SubMappingId");
					this.OnSubMappings_SubMappingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForteQuest_ForteQuestSubMapping", Storage="_ForteQuest", ThisKey="ForteQuest_ForteQuestId", OtherKey="ForteQuestId", IsForeignKey=true)]
		public ForteQuest ForteQuest
		{
			get
			{
				return this._ForteQuest.Entity;
			}
			set
			{
				ForteQuest previousValue = this._ForteQuest.Entity;
				if (((previousValue != value) 
							|| (this._ForteQuest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForteQuest.Entity = null;
						previousValue.ForteQuestSubMappings.Remove(this);
					}
					this._ForteQuest.Entity = value;
					if ((value != null))
					{
						value.ForteQuestSubMappings.Add(this);
						this._ForteQuest_ForteQuestId = value.ForteQuestId;
					}
					else
					{
						this._ForteQuest_ForteQuestId = default(int);
					}
					this.SendPropertyChanged("ForteQuest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubMapping_ForteQuestSubMapping", Storage="_SubMapping", ThisKey="SubMappings_SubMappingId", OtherKey="SubMappingId", IsForeignKey=true)]
		public SubMapping SubMapping
		{
			get
			{
				return this._SubMapping.Entity;
			}
			set
			{
				SubMapping previousValue = this._SubMapping.Entity;
				if (((previousValue != value) 
							|| (this._SubMapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubMapping.Entity = null;
						previousValue.ForteQuestSubMappings.Remove(this);
					}
					this._SubMapping.Entity = value;
					if ((value != null))
					{
						value.ForteQuestSubMappings.Add(this);
						this._SubMappings_SubMappingId = value.SubMappingId;
					}
					else
					{
						this._SubMappings_SubMappingId = default(int);
					}
					this.SendPropertyChanged("SubMapping");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mappings")]
	public partial class Mapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MappingId;
		
		private string _RSubtraits;
		
		private string _ISubtraits;
		
		private string _ASubtraits;
		
		private string _SSubtraits;
		
		private string _ESubtraits;
		
		private string _CSubtraits;
		
		private string _RWeights;
		
		private string _IWeights;
		
		private string _AWeights;
		
		private string _SWeights;
		
		private string _EWeights;
		
		private string _CWeights;
		
		private EntitySet<ForteQuestMapping> _ForteQuestMappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMappingIdChanging(int value);
    partial void OnMappingIdChanged();
    partial void OnRSubtraitsChanging(string value);
    partial void OnRSubtraitsChanged();
    partial void OnISubtraitsChanging(string value);
    partial void OnISubtraitsChanged();
    partial void OnASubtraitsChanging(string value);
    partial void OnASubtraitsChanged();
    partial void OnSSubtraitsChanging(string value);
    partial void OnSSubtraitsChanged();
    partial void OnESubtraitsChanging(string value);
    partial void OnESubtraitsChanged();
    partial void OnCSubtraitsChanging(string value);
    partial void OnCSubtraitsChanged();
    partial void OnRWeightsChanging(string value);
    partial void OnRWeightsChanged();
    partial void OnIWeightsChanging(string value);
    partial void OnIWeightsChanged();
    partial void OnAWeightsChanging(string value);
    partial void OnAWeightsChanged();
    partial void OnSWeightsChanging(string value);
    partial void OnSWeightsChanged();
    partial void OnEWeightsChanging(string value);
    partial void OnEWeightsChanged();
    partial void OnCWeightsChanging(string value);
    partial void OnCWeightsChanged();
    #endregion
		
		public Mapping()
		{
			this._ForteQuestMappings = new EntitySet<ForteQuestMapping>(new Action<ForteQuestMapping>(this.attach_ForteQuestMappings), new Action<ForteQuestMapping>(this.detach_ForteQuestMappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MappingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MappingId
		{
			get
			{
				return this._MappingId;
			}
			set
			{
				if ((this._MappingId != value))
				{
					this.OnMappingIdChanging(value);
					this.SendPropertyChanging();
					this._MappingId = value;
					this.SendPropertyChanged("MappingId");
					this.OnMappingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSubtraits", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RSubtraits
		{
			get
			{
				return this._RSubtraits;
			}
			set
			{
				if ((this._RSubtraits != value))
				{
					this.OnRSubtraitsChanging(value);
					this.SendPropertyChanging();
					this._RSubtraits = value;
					this.SendPropertyChanged("RSubtraits");
					this.OnRSubtraitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISubtraits", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ISubtraits
		{
			get
			{
				return this._ISubtraits;
			}
			set
			{
				if ((this._ISubtraits != value))
				{
					this.OnISubtraitsChanging(value);
					this.SendPropertyChanging();
					this._ISubtraits = value;
					this.SendPropertyChanged("ISubtraits");
					this.OnISubtraitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ASubtraits", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ASubtraits
		{
			get
			{
				return this._ASubtraits;
			}
			set
			{
				if ((this._ASubtraits != value))
				{
					this.OnASubtraitsChanging(value);
					this.SendPropertyChanging();
					this._ASubtraits = value;
					this.SendPropertyChanged("ASubtraits");
					this.OnASubtraitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSubtraits", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SSubtraits
		{
			get
			{
				return this._SSubtraits;
			}
			set
			{
				if ((this._SSubtraits != value))
				{
					this.OnSSubtraitsChanging(value);
					this.SendPropertyChanging();
					this._SSubtraits = value;
					this.SendPropertyChanged("SSubtraits");
					this.OnSSubtraitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ESubtraits", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ESubtraits
		{
			get
			{
				return this._ESubtraits;
			}
			set
			{
				if ((this._ESubtraits != value))
				{
					this.OnESubtraitsChanging(value);
					this.SendPropertyChanging();
					this._ESubtraits = value;
					this.SendPropertyChanged("ESubtraits");
					this.OnESubtraitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSubtraits", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CSubtraits
		{
			get
			{
				return this._CSubtraits;
			}
			set
			{
				if ((this._CSubtraits != value))
				{
					this.OnCSubtraitsChanging(value);
					this.SendPropertyChanging();
					this._CSubtraits = value;
					this.SendPropertyChanged("CSubtraits");
					this.OnCSubtraitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RWeights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RWeights
		{
			get
			{
				return this._RWeights;
			}
			set
			{
				if ((this._RWeights != value))
				{
					this.OnRWeightsChanging(value);
					this.SendPropertyChanging();
					this._RWeights = value;
					this.SendPropertyChanged("RWeights");
					this.OnRWeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IWeights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string IWeights
		{
			get
			{
				return this._IWeights;
			}
			set
			{
				if ((this._IWeights != value))
				{
					this.OnIWeightsChanging(value);
					this.SendPropertyChanging();
					this._IWeights = value;
					this.SendPropertyChanged("IWeights");
					this.OnIWeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AWeights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AWeights
		{
			get
			{
				return this._AWeights;
			}
			set
			{
				if ((this._AWeights != value))
				{
					this.OnAWeightsChanging(value);
					this.SendPropertyChanging();
					this._AWeights = value;
					this.SendPropertyChanged("AWeights");
					this.OnAWeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SWeights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SWeights
		{
			get
			{
				return this._SWeights;
			}
			set
			{
				if ((this._SWeights != value))
				{
					this.OnSWeightsChanging(value);
					this.SendPropertyChanging();
					this._SWeights = value;
					this.SendPropertyChanged("SWeights");
					this.OnSWeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EWeights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EWeights
		{
			get
			{
				return this._EWeights;
			}
			set
			{
				if ((this._EWeights != value))
				{
					this.OnEWeightsChanging(value);
					this.SendPropertyChanging();
					this._EWeights = value;
					this.SendPropertyChanged("EWeights");
					this.OnEWeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CWeights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CWeights
		{
			get
			{
				return this._CWeights;
			}
			set
			{
				if ((this._CWeights != value))
				{
					this.OnCWeightsChanging(value);
					this.SendPropertyChanging();
					this._CWeights = value;
					this.SendPropertyChanged("CWeights");
					this.OnCWeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mapping_ForteQuestMapping", Storage="_ForteQuestMappings", ThisKey="MappingId", OtherKey="Mappings_MappingId")]
		public EntitySet<ForteQuestMapping> ForteQuestMappings
		{
			get
			{
				return this._ForteQuestMappings;
			}
			set
			{
				this._ForteQuestMappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForteQuestMappings(ForteQuestMapping entity)
		{
			this.SendPropertyChanging();
			entity.Mapping = this;
		}
		
		private void detach_ForteQuestMappings(ForteQuestMapping entity)
		{
			this.SendPropertyChanging();
			entity.Mapping = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubMappings")]
	public partial class SubMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubMappingId;
		
		private string _R1_Weights;
		
		private string _I1_Weights;
		
		private string _A1_Weights;
		
		private string _S1_Weights;
		
		private string _E1_Weights;
		
		private string _C1_Weights;
		
		private string _R2_Weights;
		
		private string _I2_Weights;
		
		private string _A2_Weights;
		
		private string _S2_Weights;
		
		private string _E2_Weights;
		
		private string _C2_Weights;
		
		private string _R3_Weights;
		
		private string _I3_Weights;
		
		private string _A3_Weights;
		
		private string _S3_Weights;
		
		private string _E3_Weights;
		
		private string _C3_Weights;
		
		private int _Activity_ActivityId;
		
		private EntitySet<ForteQuestSubMapping> _ForteQuestSubMappings;
		
		private EntityRef<Activities1> _Activities1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubMappingIdChanging(int value);
    partial void OnSubMappingIdChanged();
    partial void OnR1_WeightsChanging(string value);
    partial void OnR1_WeightsChanged();
    partial void OnI1_WeightsChanging(string value);
    partial void OnI1_WeightsChanged();
    partial void OnA1_WeightsChanging(string value);
    partial void OnA1_WeightsChanged();
    partial void OnS1_WeightsChanging(string value);
    partial void OnS1_WeightsChanged();
    partial void OnE1_WeightsChanging(string value);
    partial void OnE1_WeightsChanged();
    partial void OnC1_WeightsChanging(string value);
    partial void OnC1_WeightsChanged();
    partial void OnR2_WeightsChanging(string value);
    partial void OnR2_WeightsChanged();
    partial void OnI2_WeightsChanging(string value);
    partial void OnI2_WeightsChanged();
    partial void OnA2_WeightsChanging(string value);
    partial void OnA2_WeightsChanged();
    partial void OnS2_WeightsChanging(string value);
    partial void OnS2_WeightsChanged();
    partial void OnE2_WeightsChanging(string value);
    partial void OnE2_WeightsChanged();
    partial void OnC2_WeightsChanging(string value);
    partial void OnC2_WeightsChanged();
    partial void OnR3_WeightsChanging(string value);
    partial void OnR3_WeightsChanged();
    partial void OnI3_WeightsChanging(string value);
    partial void OnI3_WeightsChanged();
    partial void OnA3_WeightsChanging(string value);
    partial void OnA3_WeightsChanged();
    partial void OnS3_WeightsChanging(string value);
    partial void OnS3_WeightsChanged();
    partial void OnE3_WeightsChanging(string value);
    partial void OnE3_WeightsChanged();
    partial void OnC3_WeightsChanging(string value);
    partial void OnC3_WeightsChanged();
    partial void OnActivity_ActivityIdChanging(int value);
    partial void OnActivity_ActivityIdChanged();
    #endregion
		
		public SubMapping()
		{
			this._ForteQuestSubMappings = new EntitySet<ForteQuestSubMapping>(new Action<ForteQuestSubMapping>(this.attach_ForteQuestSubMappings), new Action<ForteQuestSubMapping>(this.detach_ForteQuestSubMappings));
			this._Activities1 = default(EntityRef<Activities1>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubMappingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubMappingId
		{
			get
			{
				return this._SubMappingId;
			}
			set
			{
				if ((this._SubMappingId != value))
				{
					this.OnSubMappingIdChanging(value);
					this.SendPropertyChanging();
					this._SubMappingId = value;
					this.SendPropertyChanged("SubMappingId");
					this.OnSubMappingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_R1_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string R1_Weights
		{
			get
			{
				return this._R1_Weights;
			}
			set
			{
				if ((this._R1_Weights != value))
				{
					this.OnR1_WeightsChanging(value);
					this.SendPropertyChanging();
					this._R1_Weights = value;
					this.SendPropertyChanged("R1_Weights");
					this.OnR1_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_I1_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string I1_Weights
		{
			get
			{
				return this._I1_Weights;
			}
			set
			{
				if ((this._I1_Weights != value))
				{
					this.OnI1_WeightsChanging(value);
					this.SendPropertyChanging();
					this._I1_Weights = value;
					this.SendPropertyChanged("I1_Weights");
					this.OnI1_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A1_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string A1_Weights
		{
			get
			{
				return this._A1_Weights;
			}
			set
			{
				if ((this._A1_Weights != value))
				{
					this.OnA1_WeightsChanging(value);
					this.SendPropertyChanging();
					this._A1_Weights = value;
					this.SendPropertyChanged("A1_Weights");
					this.OnA1_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S1_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string S1_Weights
		{
			get
			{
				return this._S1_Weights;
			}
			set
			{
				if ((this._S1_Weights != value))
				{
					this.OnS1_WeightsChanging(value);
					this.SendPropertyChanging();
					this._S1_Weights = value;
					this.SendPropertyChanged("S1_Weights");
					this.OnS1_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E1_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string E1_Weights
		{
			get
			{
				return this._E1_Weights;
			}
			set
			{
				if ((this._E1_Weights != value))
				{
					this.OnE1_WeightsChanging(value);
					this.SendPropertyChanging();
					this._E1_Weights = value;
					this.SendPropertyChanged("E1_Weights");
					this.OnE1_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C1_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string C1_Weights
		{
			get
			{
				return this._C1_Weights;
			}
			set
			{
				if ((this._C1_Weights != value))
				{
					this.OnC1_WeightsChanging(value);
					this.SendPropertyChanging();
					this._C1_Weights = value;
					this.SendPropertyChanged("C1_Weights");
					this.OnC1_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_R2_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string R2_Weights
		{
			get
			{
				return this._R2_Weights;
			}
			set
			{
				if ((this._R2_Weights != value))
				{
					this.OnR2_WeightsChanging(value);
					this.SendPropertyChanging();
					this._R2_Weights = value;
					this.SendPropertyChanged("R2_Weights");
					this.OnR2_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_I2_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string I2_Weights
		{
			get
			{
				return this._I2_Weights;
			}
			set
			{
				if ((this._I2_Weights != value))
				{
					this.OnI2_WeightsChanging(value);
					this.SendPropertyChanging();
					this._I2_Weights = value;
					this.SendPropertyChanged("I2_Weights");
					this.OnI2_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A2_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string A2_Weights
		{
			get
			{
				return this._A2_Weights;
			}
			set
			{
				if ((this._A2_Weights != value))
				{
					this.OnA2_WeightsChanging(value);
					this.SendPropertyChanging();
					this._A2_Weights = value;
					this.SendPropertyChanged("A2_Weights");
					this.OnA2_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S2_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string S2_Weights
		{
			get
			{
				return this._S2_Weights;
			}
			set
			{
				if ((this._S2_Weights != value))
				{
					this.OnS2_WeightsChanging(value);
					this.SendPropertyChanging();
					this._S2_Weights = value;
					this.SendPropertyChanged("S2_Weights");
					this.OnS2_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E2_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string E2_Weights
		{
			get
			{
				return this._E2_Weights;
			}
			set
			{
				if ((this._E2_Weights != value))
				{
					this.OnE2_WeightsChanging(value);
					this.SendPropertyChanging();
					this._E2_Weights = value;
					this.SendPropertyChanged("E2_Weights");
					this.OnE2_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C2_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string C2_Weights
		{
			get
			{
				return this._C2_Weights;
			}
			set
			{
				if ((this._C2_Weights != value))
				{
					this.OnC2_WeightsChanging(value);
					this.SendPropertyChanging();
					this._C2_Weights = value;
					this.SendPropertyChanged("C2_Weights");
					this.OnC2_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_R3_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string R3_Weights
		{
			get
			{
				return this._R3_Weights;
			}
			set
			{
				if ((this._R3_Weights != value))
				{
					this.OnR3_WeightsChanging(value);
					this.SendPropertyChanging();
					this._R3_Weights = value;
					this.SendPropertyChanged("R3_Weights");
					this.OnR3_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_I3_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string I3_Weights
		{
			get
			{
				return this._I3_Weights;
			}
			set
			{
				if ((this._I3_Weights != value))
				{
					this.OnI3_WeightsChanging(value);
					this.SendPropertyChanging();
					this._I3_Weights = value;
					this.SendPropertyChanged("I3_Weights");
					this.OnI3_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A3_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string A3_Weights
		{
			get
			{
				return this._A3_Weights;
			}
			set
			{
				if ((this._A3_Weights != value))
				{
					this.OnA3_WeightsChanging(value);
					this.SendPropertyChanging();
					this._A3_Weights = value;
					this.SendPropertyChanged("A3_Weights");
					this.OnA3_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S3_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string S3_Weights
		{
			get
			{
				return this._S3_Weights;
			}
			set
			{
				if ((this._S3_Weights != value))
				{
					this.OnS3_WeightsChanging(value);
					this.SendPropertyChanging();
					this._S3_Weights = value;
					this.SendPropertyChanged("S3_Weights");
					this.OnS3_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E3_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string E3_Weights
		{
			get
			{
				return this._E3_Weights;
			}
			set
			{
				if ((this._E3_Weights != value))
				{
					this.OnE3_WeightsChanging(value);
					this.SendPropertyChanging();
					this._E3_Weights = value;
					this.SendPropertyChanged("E3_Weights");
					this.OnE3_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C3_Weights", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string C3_Weights
		{
			get
			{
				return this._C3_Weights;
			}
			set
			{
				if ((this._C3_Weights != value))
				{
					this.OnC3_WeightsChanging(value);
					this.SendPropertyChanging();
					this._C3_Weights = value;
					this.SendPropertyChanged("C3_Weights");
					this.OnC3_WeightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activity_ActivityId", DbType="Int NOT NULL")]
		public int Activity_ActivityId
		{
			get
			{
				return this._Activity_ActivityId;
			}
			set
			{
				if ((this._Activity_ActivityId != value))
				{
					if (this._Activities1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivity_ActivityIdChanging(value);
					this.SendPropertyChanging();
					this._Activity_ActivityId = value;
					this.SendPropertyChanged("Activity_ActivityId");
					this.OnActivity_ActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubMapping_ForteQuestSubMapping", Storage="_ForteQuestSubMappings", ThisKey="SubMappingId", OtherKey="SubMappings_SubMappingId")]
		public EntitySet<ForteQuestSubMapping> ForteQuestSubMappings
		{
			get
			{
				return this._ForteQuestSubMappings;
			}
			set
			{
				this._ForteQuestSubMappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activities1_SubMapping", Storage="_Activities1", ThisKey="Activity_ActivityId", OtherKey="ActivityId", IsForeignKey=true)]
		public Activities1 Activities1
		{
			get
			{
				return this._Activities1.Entity;
			}
			set
			{
				Activities1 previousValue = this._Activities1.Entity;
				if (((previousValue != value) 
							|| (this._Activities1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activities1.Entity = null;
						previousValue.SubMappings.Remove(this);
					}
					this._Activities1.Entity = value;
					if ((value != null))
					{
						value.SubMappings.Add(this);
						this._Activity_ActivityId = value.ActivityId;
					}
					else
					{
						this._Activity_ActivityId = default(int);
					}
					this.SendPropertyChanged("Activities1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForteQuestSubMappings(ForteQuestSubMapping entity)
		{
			this.SendPropertyChanging();
			entity.SubMapping = this;
		}
		
		private void detach_ForteQuestSubMappings(ForteQuestSubMapping entity)
		{
			this.SendPropertyChanging();
			entity.SubMapping = null;
		}
	}
}
#pragma warning restore 1591
